// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  premium       Boolean   @default(false)
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  portfolio     Portfolio[]
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Portfolio {
  id               String   @id @default(cuid()) @map("_id")
  userId           String
  type             String   // e.g. 'developer', 'designer', etc.
  name             String
  title            String
  email            String
  phone            String?
  location         String?
  about            String?
  profileImage     String?
  contactForm      Boolean  @default(true)

  // Optional individual links
  linkedinLink     String?
  personalWebsite  String?

  // Socials as structured array (not object) for better front-end mapping
  socials          Json?     // Array of { type: string; url: string; username: string }

  // Theme settings like colors, fonts, etc.
  theme            Json?

  // Type-specific fields (e.g. projects, skills, services)
  extraData        Json?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  views            Int      @default(0)

  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewsLog         PortfolioView[]
}

model PortfolioView {
  id            String   @id @default(cuid()) @map("_id")
  portfolioId   String
  timestamp     DateTime @default(now())
  ip            String?
  country       String?
  referrer      String?
  userAgent     String?
  isBot         Boolean  @default(false)

  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}
