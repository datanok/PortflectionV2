// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  premium       Boolean   @default(false)
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  portfolio     Portfolio[]
  
  // Component contribution relations
  componentSubmissions ComponentSubmission[]
  reviewedComponents    ComponentSubmission[] @relation("ComponentReviewer")
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  idToken              String?  // Required for Google OAuth
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Portfolio {
  id               String   @id @default(cuid()) @map("_id")
  userId           String
  name             String
  slug             String   @unique
  description      String?
  
  // Component-based structure
  layout          Json      // Stores the component tree structure
  theme           Json?     // Global theme settings
  
  // Legacy fields (kept for backward compatibility)
  portfolioType   String    @default("developer")
  title           String?
  email           String?
  phone           String?
  location        String?
  about           String?
  profileImage    String?
  contactForm     Boolean   @default(true)
  linkedinLink    String?
  personalWebsite String?
  socials         Json?     // Array of { type: string; url: string; username: string }
  layoutType      String    @default("classic") // For backward compatibility
  extraData       Json?

  // Metadata
  isPublished     Boolean   @default(false)
  isTemplate      Boolean   @default(false)
  tags            String[]  @default([])
  thumbnail       String?   // URL to portfolio thumbnail
  
  // Stats
  views           Int       @default(0)
  lastViewedAt    DateTime?
  
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewsLog        PortfolioView[]
  components      PortfolioComponent[]
}


model PortfolioView {
  id            String   @id @default(cuid()) @map("_id")
  portfolioId   String
  timestamp     DateTime @default(now())
  ip            String?
  country       String?
  referrer      String?
  userAgent     String?
  isBot         Boolean  @default(false)

  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model PortfolioComponent {
  id          String   @id @default(cuid()) @map("_id")
  portfolioId String
  type        String   // e.g., "hero", "about", "skills"
  variant     String   // e.g., "minimal", "centered"
  props       Json     // Component-specific properties
  styles      Json?    // Custom styling
  order       Int      // Position in the layout
  isActive    Boolean  @default(true)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  portfolio  Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  @@index([portfolioId, order])
}

// Component Contribution System Models

model ComponentSubmission {
  id                String   @id @default(cuid()) @map("_id")
  name              String
  description       String
  category          String   // e.g., "hero", "about", "projects"
  tags              String[] @default([])
  componentCode     String   // The actual React component code
  demoUrl           String?
  documentationUrl  String?
  githubUrl         String?
  version           String   @default("1.0.0")
  
  // Author information
  authorName        String
  authorEmail       String
  authorGithub      String?
  
  // Submission status
  status            String   @default("PENDING") // PENDING, APPROVED, REJECTED
  submittedBy       String   // User ID who submitted
  submittedAt       DateTime @default(now())
  
  // Review information
  reviewedBy        String?  // Admin who reviewed
  reviewedAt        DateTime?
  reviewerNotes     String?
  rejectionReason   String?
  
  // Relations
  submittedByUser   User     @relation(fields: [submittedBy], references: [id], onDelete: Cascade)
  reviewedByUser    User?    @relation("ComponentReviewer", fields: [reviewedBy], references: [id])
  
  @@index([status, submittedAt])
  @@index([category])
  @@index([submittedBy])
}


